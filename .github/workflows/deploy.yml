name: Deploy Backoffice to EC2

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          echo "üîç Creating .env file with variables:"

          cat > .env << EOF
          VITE_BASE_PATH=${{ vars.VITE_BASE_PATH }}
          VITE_API_DOMAIN=${{ vars.VITE_API_DOMAIN }}
          VITE_GOOGLE_MAPS_API_KEY=${{ vars.VITE_GOOGLE_MAPS_API_KEY }}
          EOF

          echo "üìÑ .env file contents:"
          cat .env

          echo "‚ö†Ô∏è  Note: VITE_API_DOMAIN should NOT include '/api' - the app will add it automatically"

      - name: Build application
        run: |
          echo "üî® Building application..."
          echo "Environment variables visible to build:"
          echo "VITE_BASE_PATH: '$VITE_BASE_PATH'"
          echo "VITE_API_DOMAIN: '$VITE_API_DOMAIN'"

          # Load .env into current shell environment
          export $(grep -v '^#' .env | xargs)

          echo "After loading .env:"
          echo "VITE_BASE_PATH: '$VITE_BASE_PATH'"
          echo "VITE_API_DOMAIN: '$VITE_API_DOMAIN'"

          npm run build

          echo "üì¶ Build completed. Checking build output:"
          ls -la dist/

          echo "üîç Checking index.html for base path:"
          if [ -f "dist/index.html" ]; then
            grep -n "href\|src" dist/index.html | head -5
          fi

      - name: Create deployment package
        run: |
          # Create deployment package with only built files
          tar -czf deployment.tar.gz dist/

          echo "üì¶ Created deployment package with dist/ folder"

      - name: Setup deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 5m
          script: |
            # Create nginx web directory structure
            sudo mkdir -p /var/www/html/backoffice
            sudo chown -R ${{ secrets.EC2_USERNAME }}:www-data /var/www/html/backoffice

            # Create temp staging directory
            sudo mkdir -p /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice
            sudo chown -R ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice

            cd /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice

            # Backup current deployment if it exists
            if [ -d "current" ]; then
              rm -rf backup
              mv current backup
            fi

            # Create new deployment directory
            mkdir -p current

      - name: Upload deployment package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice/current"

      - name: Extract and deploy files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 5m
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice/current

            # Extract deployment package
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz

            # Backup current web files if they exist
            if [ -d "/var/www/html/backoffice/dist" ]; then
              sudo rm -rf /var/www/html/backoffice/dist.backup
              sudo mv /var/www/html/backoffice/dist /var/www/html/backoffice/dist.backup
            fi

            # Copy built files to web directory
            sudo cp -r dist/ /var/www/html/backoffice/

            # Set proper permissions for web server access
            sudo chown -R www-data:www-data /var/www/html/backoffice/dist
            sudo find /var/www/html/backoffice/dist -type f -exec chmod 644 {} \;
            sudo find /var/www/html/backoffice/dist -type d -exec chmod 755 {} \;

            # Ensure parent directories have correct permissions
            sudo chmod 755 /var/www/html/backoffice

      - name: Reload web server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 2m
          script: |
            # Reload nginx if it's running (no configuration changes, just refresh)
            if systemctl is-active --quiet nginx; then
              sudo systemctl reload nginx
              echo "‚úÖ Web server reloaded"
            else
              echo "‚ö†Ô∏è Web server is not running"
            fi

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 2m
          script: |
            # Wait a moment for nginx to reload
            sleep 5

            # Test backoffice deployment
            echo "üîç Testing backoffice deployment..."

            # Check if files are in place
            if [ -f "/var/www/html/backoffice/dist/index.html" ]; then
              echo "‚úÖ Backoffice files deployed successfully"
              ls -la /var/www/html/backoffice/dist/ | head -5
            else
              echo "‚ùå Backoffice files not found at expected location"
              exit 1
            fi

            # Test custom domain (if configured)
            if curl -f http://backoffice.qualiflex.com.br/ >/dev/null 2>&1; then
              echo "‚úÖ Backoffice is accessible at custom domain"
            else
              echo "‚ÑπÔ∏è Custom domain not accessible (this is normal if not configured yet)"
            fi

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 5m
          script: |
            echo "üîÑ Rolling back to previous deployment..."

            # Restore web files if backup exists
            if [ -d "/var/www/html/backoffice/dist.backup" ]; then
              sudo rm -rf /var/www/html/backoffice/dist
              sudo mv /var/www/html/backoffice/dist.backup /var/www/html/backoffice/dist
              echo "‚úÖ Web files rollback completed"
            else
              echo "‚ö†Ô∏è No web files backup found"
            fi

            # Restore staging files if backup exists
            cd /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice
            if [ -d "backup" ]; then
              rm -rf current
              mv backup current
              echo "‚úÖ Staging files rollback completed"
            else
              echo "‚ö†Ô∏è No staging backup found"
            fi

            # Reload web server
            sudo systemctl reload nginx || true
            echo "‚úÖ Rollback process completed"
