name: Deploy Backoffice to EC2

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_BASE_PATH: "/backoffice/"

      - name: Create deployment package
        run: |
          mkdir deployment
          cp -r dist/ deployment/
          cp -r nginx-config/ deployment/ || true
          cp -r scripts/ deployment/ || true
          tar -czf deployment.tar.gz -C deployment .

      - name: Setup deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 5m
          script: |
            # Create backoffice directory structure
            sudo mkdir -p /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice
            sudo chown -R ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice

            cd /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice

            # Backup current deployment if it exists
            if [ -d "current" ]; then
              rm -rf backup
              mv current backup
            fi

            # Create new deployment directory
            mkdir -p current

      - name: Upload deployment package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice/current"

      - name: Extract and setup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 5m
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice/current

            # Extract deployment package
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz

            # Set proper permissions for files and directories
            find dist/ -type f -exec chmod 644 {} \;
            find dist/ -type d -exec chmod 755 {} \;

            # Fix permissions for nginx access (crucial for avoiding 403 errors)
            sudo chmod 755 /home/${{ secrets.EC2_USERNAME }}
            sudo chmod 755 /home/${{ secrets.EC2_USERNAME }}/apps
            sudo chmod 755 /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice
            sudo chmod 755 /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice/current
            sudo chmod 755 /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice/current/dist

            # Setup integrated nginx configuration if script exists
            if [ -f "scripts/setup-integrated-nginx.sh" ]; then
              chmod +x scripts/setup-integrated-nginx.sh
              ./scripts/setup-integrated-nginx.sh
            fi

      - name: Update nginx configuration
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 2m
          script: |
            # Reload nginx if it's running
            if systemctl is-active --quiet nginx; then
              sudo systemctl reload nginx
              echo "‚úÖ Nginx configuration reloaded"
            else
              echo "‚ö†Ô∏è Nginx is not running"
            fi

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 2m
          script: |
            # Wait a moment for nginx to reload
            sleep 5

            # Test backoffice endpoints
            echo "üîç Testing backoffice endpoints..."

            # Test direct file access
            if curl -f http://localhost/backoffice/ >/dev/null 2>&1; then
              echo "‚úÖ Backoffice is accessible at /backoffice/"
            else
              echo "‚ö†Ô∏è Backoffice not responding at /backoffice/ (this may be normal if nginx config needs manual setup)"
            fi

            # Test custom domain (after DNS setup)
            if curl -f http://backoffice.qualiflex.com.br/ >/dev/null 2>&1; then
              echo "‚úÖ Backoffice is accessible at custom domain"
            else
              echo "‚ö†Ô∏è Custom domain not configured yet (expected until DNS is set up)"
            fi

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          timeout: 30s
          command_timeout: 5m
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/apps/qualiflex-backoffice

            if [ -d "backup" ]; then
              echo "üîÑ Rolling back to previous deployment..."
              rm -rf current
              mv backup current
              sudo systemctl reload nginx || true
              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup found for rollback"
            fi
